name: Publish chart
on:
  push:
    tags:
      - "*.*.*"
  workflow_dispatch:
jobs:
  publish-chart:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - uses: azure/setup-helm@v3
        with:
          token: ${{secrets.GITHUB_TOKEN }}
      - name: install dependencies
        run: pip install chartpress
      - uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Flake check
        run: nix flake check
      - name: Publish images
        uses: workflow/nix-shell-action@v3.3.0
        env:
          DOCKER_USERNAME: ${{ secrets.RENKU_DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.RENKU_DOCKER_PASSWORD }}
          DOCKER_REPOSITORY: ${{ secrets.RENKU_DOCKER_REPOSITORY }}
        with:
          flakes-from-devshell: true
          flakes: .#csi-rclone-container-layerd-amd64
          script: |
            export TAG=$(echo ${GITHUB_REF} |cut -d/ -f3)
            export DOCKER_REPOSITORY=${DOCKER_REPOSITORY:-renku/csi-rclone}

            nix build .#csi-rclone-container-layerd-aarch64 && ./result | docker load
            docker tag csi-rclone:latest csi-rclone:internal
            docker build -t $DOCKER_REPOSITORY:latest-aarch64 - <<- EOF
              FROM csi-rclone:internal
              RUN ln -s /bin/linux_*/csi-rclone-plugin /bin/csi-rclone-plugin
            EOF

            docker tag $DOCKER_REPOSITORY:latest-aarch64 $DOCKER_REPOSITORY:${TAG}-aarch64
            
            nix build .#csi-rclone-container-layerd-amd64 && ./result | docker load
            docker build -t $DOCKER_REPOSITORY:latest-aarch64 - <<- EOF
              FROM csi-rclone:latest
              RUN ln -s /bin/linux_*/csi-rclone-plugin /bin/csi-rclone-plugin
            EOF
            docker tag $DOCKER_REPOSITORY:latest-amd64 $DOCKER_REPOSITORY:${TAG}-amd64

            echo "${DOCKER_PASSWORD}" | docker login -u ${DOCKER_USERNAME} --password-stdin

            docker push $DOCKER_REPOSITORY:latest-aarch64
            docker push $DOCKER_REPOSITORY:${TAG}-aarch64
            docker push $DOCKER_REPOSITORY:latest-amd64
            docker push $DOCKER_REPOSITORY:${TAG}-amd64

            docker manifest create \
              $DOCKER_REPOSITORY:latest \
              --amend $DOCKER_REPOSITORY:latest-amd64 \
              --amend $DOCKER_REPOSITORY:latest-aarch64
            docker manifest create \
              $DOCKER_REPOSITORY:${TAG} \
              --amend $DOCKER_REPOSITORY:${TAG}-amd64 \
              --amend $DOCKER_REPOSITORY:${TAG}-aarch64
            
            docker manifest push $DOCKER_REPOSITORY:latest
            docker manifest push $DOCKER_REPOSITORY:${TAG}

      - name: Publish chart
        env:
          GITHUB_TOKEN: ${{ secrets.RENKUBOT_GITHUB_TOKEN }}
        run: |
          cd deploy
          git config --global user.email "renku@datascience.ch"
          git config --global user.name "Renku Bot"
          export TAG=$(echo ${GITHUB_REF} |cut -d/ -f3)
          helm dep update csi-rclone
          chartpress --tag $TAG
          helm lint csi-rclone
          chartpress --tag $TAG --no-build --publish-chart
          
